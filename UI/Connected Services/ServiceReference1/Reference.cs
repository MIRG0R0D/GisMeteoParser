//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UI.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CityDictionary", Namespace="http://schemas.datacontract.org/2004/07/WcfService1")]
    [System.SerializableAttribute()]
    public partial class CityDictionary : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<string, string> DictField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<string, string> Dict {
            get {
                return this.DictField;
            }
            set {
                if ((object.ReferenceEquals(this.DictField, value) != true)) {
                    this.DictField = value;
                    this.RaisePropertyChanged("Dict");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CityDetailed", Namespace="http://schemas.datacontract.org/2004/07/WcfService1")]
    [System.SerializableAttribute()]
    public partial class CityDetailed : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DayTempField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NightTempField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DayTemp {
            get {
                return this.DayTempField;
            }
            set {
                if ((object.ReferenceEquals(this.DayTempField, value) != true)) {
                    this.DayTempField = value;
                    this.RaisePropertyChanged("DayTemp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ID {
            get {
                return this.IDField;
            }
            set {
                if ((object.ReferenceEquals(this.IDField, value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NightTemp {
            get {
                return this.NightTempField;
            }
            set {
                if ((object.ReferenceEquals(this.NightTempField, value) != true)) {
                    this.NightTempField = value;
                    this.RaisePropertyChanged("NightTemp");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UpdateState", Namespace="http://schemas.datacontract.org/2004/07/WcfService1")]
    [System.SerializableAttribute()]
    public partial class UpdateState : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FinishedCityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ReadyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TotalField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FinishedCity {
            get {
                return this.FinishedCityField;
            }
            set {
                if ((this.FinishedCityField.Equals(value) != true)) {
                    this.FinishedCityField = value;
                    this.RaisePropertyChanged("FinishedCity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Ready {
            get {
                return this.ReadyField;
            }
            set {
                if ((this.ReadyField.Equals(value) != true)) {
                    this.ReadyField = value;
                    this.RaisePropertyChanged("Ready");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Total {
            get {
                return this.TotalField;
            }
            set {
                if ((this.TotalField.Equals(value) != true)) {
                    this.TotalField = value;
                    this.RaisePropertyChanged("Total");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TaskParams", Namespace="http://schemas.datacontract.org/2004/07/WcfService1")]
    [System.SerializableAttribute()]
    public partial class TaskParams : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsSetField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime timeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsSet {
            get {
                return this.IsSetField;
            }
            set {
                if ((this.IsSetField.Equals(value) != true)) {
                    this.IsSetField = value;
                    this.RaisePropertyChanged("IsSet");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime time {
            get {
                return this.timeField;
            }
            set {
                if ((this.timeField.Equals(value) != true)) {
                    this.timeField = value;
                    this.RaisePropertyChanged("time");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Ping", ReplyAction="http://tempuri.org/IService1/PingResponse")]
        string Ping();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Ping", ReplyAction="http://tempuri.org/IService1/PingResponse")]
        System.Threading.Tasks.Task<string> PingAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DBState", ReplyAction="http://tempuri.org/IService1/DBStateResponse")]
        string DBState();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DBState", ReplyAction="http://tempuri.org/IService1/DBStateResponse")]
        System.Threading.Tasks.Task<string> DBStateAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetCityList", ReplyAction="http://tempuri.org/IService1/GetCityListResponse")]
        UI.ServiceReference1.CityDictionary GetCityList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetCityList", ReplyAction="http://tempuri.org/IService1/GetCityListResponse")]
        System.Threading.Tasks.Task<UI.ServiceReference1.CityDictionary> GetCityListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetCityDetailed", ReplyAction="http://tempuri.org/IService1/GetCityDetailedResponse")]
        UI.ServiceReference1.CityDetailed GetCityDetailed(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetCityDetailed", ReplyAction="http://tempuri.org/IService1/GetCityDetailedResponse")]
        System.Threading.Tasks.Task<UI.ServiceReference1.CityDetailed> GetCityDetailedAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Update", ReplyAction="http://tempuri.org/IService1/UpdateResponse")]
        bool Update();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Update", ReplyAction="http://tempuri.org/IService1/UpdateResponse")]
        System.Threading.Tasks.Task<bool> UpdateAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetUpdateState", ReplyAction="http://tempuri.org/IService1/GetUpdateStateResponse")]
        UI.ServiceReference1.UpdateState GetUpdateState();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetUpdateState", ReplyAction="http://tempuri.org/IService1/GetUpdateStateResponse")]
        System.Threading.Tasks.Task<UI.ServiceReference1.UpdateState> GetUpdateStateAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SetTask", ReplyAction="http://tempuri.org/IService1/SetTaskResponse")]
        void SetTask(UI.ServiceReference1.TaskParams taskParams);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SetTask", ReplyAction="http://tempuri.org/IService1/SetTaskResponse")]
        System.Threading.Tasks.Task SetTaskAsync(UI.ServiceReference1.TaskParams taskParams);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetTaskState", ReplyAction="http://tempuri.org/IService1/GetTaskStateResponse")]
        UI.ServiceReference1.TaskParams GetTaskState(UI.ServiceReference1.TaskParams taskParams);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetTaskState", ReplyAction="http://tempuri.org/IService1/GetTaskStateResponse")]
        System.Threading.Tasks.Task<UI.ServiceReference1.TaskParams> GetTaskStateAsync(UI.ServiceReference1.TaskParams taskParams);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteTask", ReplyAction="http://tempuri.org/IService1/DeleteTaskResponse")]
        void DeleteTask(UI.ServiceReference1.TaskParams taskParams);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteTask", ReplyAction="http://tempuri.org/IService1/DeleteTaskResponse")]
        System.Threading.Tasks.Task DeleteTaskAsync(UI.ServiceReference1.TaskParams taskParams);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : UI.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<UI.ServiceReference1.IService1>, UI.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string Ping() {
            return base.Channel.Ping();
        }
        
        public System.Threading.Tasks.Task<string> PingAsync() {
            return base.Channel.PingAsync();
        }
        
        public string DBState() {
            return base.Channel.DBState();
        }
        
        public System.Threading.Tasks.Task<string> DBStateAsync() {
            return base.Channel.DBStateAsync();
        }
        
        public UI.ServiceReference1.CityDictionary GetCityList() {
            return base.Channel.GetCityList();
        }
        
        public System.Threading.Tasks.Task<UI.ServiceReference1.CityDictionary> GetCityListAsync() {
            return base.Channel.GetCityListAsync();
        }
        
        public UI.ServiceReference1.CityDetailed GetCityDetailed(string id) {
            return base.Channel.GetCityDetailed(id);
        }
        
        public System.Threading.Tasks.Task<UI.ServiceReference1.CityDetailed> GetCityDetailedAsync(string id) {
            return base.Channel.GetCityDetailedAsync(id);
        }
        
        public bool Update() {
            return base.Channel.Update();
        }
        
        public System.Threading.Tasks.Task<bool> UpdateAsync() {
            return base.Channel.UpdateAsync();
        }
        
        public UI.ServiceReference1.UpdateState GetUpdateState() {
            return base.Channel.GetUpdateState();
        }
        
        public System.Threading.Tasks.Task<UI.ServiceReference1.UpdateState> GetUpdateStateAsync() {
            return base.Channel.GetUpdateStateAsync();
        }
        
        public void SetTask(UI.ServiceReference1.TaskParams taskParams) {
            base.Channel.SetTask(taskParams);
        }
        
        public System.Threading.Tasks.Task SetTaskAsync(UI.ServiceReference1.TaskParams taskParams) {
            return base.Channel.SetTaskAsync(taskParams);
        }
        
        public UI.ServiceReference1.TaskParams GetTaskState(UI.ServiceReference1.TaskParams taskParams) {
            return base.Channel.GetTaskState(taskParams);
        }
        
        public System.Threading.Tasks.Task<UI.ServiceReference1.TaskParams> GetTaskStateAsync(UI.ServiceReference1.TaskParams taskParams) {
            return base.Channel.GetTaskStateAsync(taskParams);
        }
        
        public void DeleteTask(UI.ServiceReference1.TaskParams taskParams) {
            base.Channel.DeleteTask(taskParams);
        }
        
        public System.Threading.Tasks.Task DeleteTaskAsync(UI.ServiceReference1.TaskParams taskParams) {
            return base.Channel.DeleteTaskAsync(taskParams);
        }
    }
}
